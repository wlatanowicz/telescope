<?php
declare(strict_types = 1);

namespace Unit\wlatanowicz\AppBundle\Data;

use wlatanowicz\AppBundle\Data\Range;
use wlatanowicz\AppBundle\Data\Spectrum;
use wlatanowicz\AppBundle\Data\SpectrumPoint;

class SpectrumTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @test
     */
    public function itShouldCalculateFrequencyRange()
    {
        $dataPoints = [
            new SpectrumPoint(10, 100),
            new SpectrumPoint(20, 200),
            new SpectrumPoint(30, 300),
        ];

        $spectrum = new Spectrum($dataPoints);

        $result = $spectrum->getFrequencyRange();
        $expected = new Range(10, 30);

        $this->assertEquals($expected, $result);
    }

    /**
     * @test
     */
    public function itShouldCalculatePowerRange()
    {
        $dataPoints = [
            new SpectrumPoint(10, 100),
            new SpectrumPoint(20, 200),
            new SpectrumPoint(30, 300),
        ];

        $spectrum = new Spectrum($dataPoints);

        $result = $spectrum->getPowerRange();
        $expected = new Range(100, 300);

        $this->assertEquals($expected, $result);
    }

    /**
     * @test
     */
    public function itShouldFactorizeFromReceiverOutput()
    {
        $input = [
            "2017-02-22, 22:03:57, 100, 110, 2, 4864, 1.2, 1.5, -1.5, -2.0, -5.0, 3.0",
            "2017-02-22, 22:03:57, 112, 122, 2, 4864, 21.2, 21.5, -21.5, -22.0, -25.0, 23.0",
        ];

        $expected = new Spectrum([
            new SpectrumPoint(100, 1.2),
            new SpectrumPoint(102, 1.5),
            new SpectrumPoint(104, -1.5),
            new SpectrumPoint(106, -2.0),
            new SpectrumPoint(108, -5.0),
            new SpectrumPoint(110, 3.0),
            new SpectrumPoint(112, 21.2),
            new SpectrumPoint(114, 21.5),
            new SpectrumPoint(116, -21.5),
            new SpectrumPoint(118, -22.0),
            new SpectrumPoint(120, -25.0),
            new SpectrumPoint(122, 23.0),
        ]);
        $spectrum = Spectrum::fromReceiverOutput($input);

        $this->assertEquals($expected, $spectrum);
    }

    private function realLifeSampleReceiverOutput()
    {
        return [
            "2017-02-22, 22:03:57, 88000000, 90500000, 78125.00, 4864, 11.34, 11.59, 14.87, 10.75, 12.98, 8.95, 9.35, 10.30, 7.59, 7.19, 7.97, 12.13, 7.90, 6.86, 7.62, 7.73, 7.90, 7.90, 7.72, 6.99, 7.92, 12.08, 9.15, 18.70, 9.11, 10.48, 9.34, 12.98, 10.03, 9.98, 14.71, 10.59, 10.59",
            "2017-02-22, 22:03:57, 90500000, 93000000, 78125.00, 4864, 5.61, 6.23, -1.38, -6.46, -4.89, -3.80, -2.87, -3.46, -2.84, -0.91, 0.69, -2.62, -4.86, -4.26, -0.32, 0.30, -1.90, -1.90, -3.56, -4.03, -4.82, -4.36, -0.66, 2.62, -2.43, -3.30, -4.09, -3.81, -5.04, -6.40, -5.66, -3.38, -3.38",
            "2017-02-22, 22:03:57, 93000000, 95500000, 78125.00, 4864, 15.25, 2.86, -3.84, -6.00, -6.57, 0.20, -3.75, -3.54, -2.83, -4.51, -6.39, -5.03, -5.30, -4.15, -4.68, 3.99, -2.90, -2.90, -1.48, 2.42, 13.90, 12.54, 3.32, 5.15, -1.89, -4.35, -4.65, -5.91, -4.38, -2.93, -0.97, 4.27, 4.27",
            "2017-02-22, 22:03:57, 95500000, 98000000, 78125.00, 4864, 2.06, 2.81, 2.58, 2.90, 3.58, 3.23, 3.61, 4.22, 4.70, 5.89, 9.26, 19.94, 18.58, 8.96, 5.91, 4.29, 3.15, 3.15, 3.08, 9.45, 3.97, 2.67, 3.01, 2.25, 2.78, 2.70, 2.12, 4.80, 8.13, 2.82, 2.46, 2.79, 2.79",
            "2017-02-22, 22:03:57, 98000000, 100500000, 78125.00, 4864, -4.90, -7.07, -8.23, -8.74, -8.06, -3.95, -3.23, -6.11, -6.68, -4.90, 2.40, 5.47, 0.43, 2.92, 8.44, 8.34, -4.24, -4.24, -3.98, -4.23, -7.27, -8.60, -6.98, -4.50, -3.43, -3.67, -3.91, -0.37, 14.37, 2.21, -3.93, -4.78, -4.78",
            "2017-02-22, 22:03:57, 100500000, 103000000, 78125.00, 4864, 8.51, 7.89, 9.88, 6.77, 5.94, 7.07, 10.79, 7.91, 10.75, 8.40, 9.84, 8.80, 9.61, 7.39, 12.06, 6.77, 6.43, 6.43, 6.41, 6.61, 6.90, 6.76, 7.35, 6.98, 9.72, 9.05, 13.10, 9.61, 19.31, 8.98, 10.30, 8.54, 8.54",
            "2017-02-22, 22:03:57, 103000000, 105500000, 78125.00, 4864, -5.84, -5.80, -6.74, -6.36, -4.67, -2.26, 3.33, 6.53, 8.92, 5.50, 8.42, 5.03, 0.22, -3.69, -4.55, -4.45, -2.42, -2.42, -0.45, 2.20, 5.09, 13.75, 18.48, 6.51, 3.46, 0.68, -0.73, 1.56, -4.24, -5.66, -6.15, -6.03, -6.03",
            "2017-02-22, 22:03:57, 105500000, 108000000, 78125.00, 4864, -16.16, -17.08, -16.89, -15.53, -14.57, -9.50, -9.99, -13.43, -14.39, -11.28, -15.75, -17.24, -17.85, -17.79, -16.57, -14.50, -4.77, -4.77, -1.58, -2.33, -5.97, -9.14, -12.41, -10.05, 3.48, -3.41, -10.64, -13.76, -15.69, -17.39, -18.39, -16.81, -16.81",
        ];
    }
}
